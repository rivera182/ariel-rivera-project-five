{"version":3,"sources":["assets/news.jpg","components/Header.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","menus","className","onClick","menuClick","country","countryChange","category","categoryChange","Main","title","toUpperCase","breakpointCols","default","1100","700","500","columnClassName","news","map","article","index","key","removePost","class","articleClick","url","urlToImage","src","alt","DefaultNewsImage","description","author","Footer","App","console","log","setState","isLoading","axios","method","responseType","params","apiKey","pageSize","page","then","response","filterArray","data","articles","filter","array","findIndex","secondIndex","countryName","removeDisplayPost","articleTitle","newNews","state","menuClickHandler","menuItem","articleLink","link","window","open","language","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85d137ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/news.6c9dbcb5.jpg\";","import React from 'react';\n\nconst Header = (props) => {\n\n    const menus = props.menus;\n\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <nav className=\"nav-menu\">\n                    <h1>News</h1>  \n                    <ul>\n                        <li onClick={() => props.menuClick(\"country\")}>\n                            Country\n                        </li>\n                        <li onClick={() => props.menuClick(\"category\")}>\n                            Category\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n            <div className=\"sub-menu\">\n                <div className=\"wrapper\">\n                    {menus.country ?\n                        <ul className=\"countries\">\n                            <li onClick={() => props.countryChange('ca')}>Canada</li>\n                            <li onClick={() => props.countryChange('us')}>USA</li>\n                            <li onClick={() => props.countryChange('gb')}>UK</li>\n                        </ul>\n                        : null}\n\n                    {menus.category ?\n                        <ul className=\"categories\">\n                            <li onClick={() => props.categoryChange('business')}>Business</li>\n                            <li onClick={() => props.categoryChange('sports')}>Sports</li>\n                            <li onClick={() => props.categoryChange('technology')}>Technology</li>\n                            <li onClick={() => props.categoryChange('entertainment')}>Entertainment</li>\n                        </ul>\n                        : null}\n                </div>\n            </div> \n        </header>\n    );\n}\n\nexport default Header; ","import React from 'react';\nimport Masonry from 'react-masonry-css';\nimport DefaultNewsImage from '../assets/news.jpg';\n\nconst Main = (props) => {\n\n    // Breakpoint columns for masonry jsx\n    const breakpointColumnsObj = {\n        default: 4,\n        1100: 3,\n        700: 2,\n        500: 1\n    };\n\n    return(\n        <main>\n            <div className=\"wrapper\">\n                <h2>\n                    {/*  If Statement to each category title when not on homepage. */}\n                    {props.title === '' ?\n                        'Top Articles'   \n                    :\n                        `Top Articles for ${props.title.toUpperCase()}`    \n                     }\n                </h2>\n                <div className=\"articles-container\">\n                    <Masonry \n                        breakpointCols={breakpointColumnsObj}\n                        className=\"my-masonry-grid\"\n                        columnClassName=\"my-masonry-grid-column\"\n                    >    \n                        {/* mapping news array for page */}\n                        {props.news.map((article, index) => (\n                            index < 40 ? \n                            <div key={index} className=\"single-news-container\">\n                                    <div\n                                        className=\"remove-post\"\n                                        onClick={() => props.removePost(article.title)}\n                                    >\n                                        <i class=\"fas fa-times-circle\"></i>\n                                    </div>\n                                    <div\n                                        className=\"news-cell\"\n                                        onClick={() => props.articleClick(article.url)}\n                                    >\n\n                                        {/* if statement for missing images */}\n                                        {!article.urlToImage ?\n                                            <img src={DefaultNewsImage} alt=\"No available image\" />\n                                            :\n                                            \n                                                <img src={article.urlToImage} alt=\"\" />\n                                        }\n                                        \n                                        <h3>{article.title}</h3>\n                                        <p>{article.description}</p>\n                                        <p>{article.author}</p>\n                                    </div>\n                            </div>\n                            : null    \n                        ))}\n                    </Masonry>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Main;","import React from 'react';\n\nconst Footer = (props) => {\n\n    const menus = props.menus;\n\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <div className=\"footer\">\n                    <p>Ariel Rivera 2020</p>\n                </div>\n            </div>\n\n        </footer>\n    );\n}\n\nexport default Footer; ","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\n//Components\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      news: [],\n      isLoading: true,\n      category: '',\n      country: '',\n      title: '',\n      menus: {\n        category: false,\n        country: false\n      }\n    }\n  }\n\n  componentDidMount() {\n    axios({\n      method: 'GET',\n      url: 'http://newsapi.org/v2/top-headlines',\n      responseType: 'json',\n      params: {\n        apiKey: '1138489a75ea4722ae7c10e95975584f',\n        language: 'en',\n        pageSize: '100',\n        page: 1\n      }\n    }).then((response) => {\n      // put response in const\n      const articles = response.data.articles;\n      //filter the response for any duplicates\n      const filterArray = articles.filter((article, index, array) => {\n        //Only return one array index with same title\n        return array.findIndex(secondIndex =>(secondIndex.title === article.title)) === index\n      });\n      //Set state with filtered array  \n      this.setState({\n        news: filterArray,\n        isLoading: false\n      })\n    })\n  }\n\n  //to change the category of news post displaying\n  categoryChange = (category) => {\n    console.log(category);\n    this.setState({\n      isLoading: true,\n      category: category\n    });\n    axios({\n      method: 'GET',\n      url: 'http://newsapi.org/v2/top-headlines',\n      responseType: 'json',\n      params: {\n        apiKey: '1138489a75ea4722ae7c10e95975584f',\n        country: 'ca',\n        category: category,\n        pageSize: '100',\n        page: 1\n      }\n    }).then((response) => {\n      // put response in const\n      const articles = response.data.articles;\n      //filter the response for any duplicates\n      const filterArray = articles.filter((article, index, array) => {\n        //Only return one array index with same title\n        return array.findIndex(secondIndex => (secondIndex.title === article.title)) === index\n      });\n      this.setState({\n        news: filterArray,\n        isLoading: false,\n        title: category\n      })\n    })\n\n  }\n\n  //this is to change the api query for country\n  countryChange = (country) => {\n    //set country in you state and turn loading on.\n    \n    this.setState({\n      isLoading: true,\n      country: country\n    });\n    axios({\n      method: 'GET',\n      url: 'http://newsapi.org/v2/top-headlines',\n      responseType: 'json',\n      params: {\n        apiKey: '1138489a75ea4722ae7c10e95975584f',\n        country: 'ca',\n        country: country,\n        pageSize: '100',\n        page: 1\n      }\n    }).then((response) => {\n      // put response in const\n      const articles = response.data.articles;\n      //filter the response for any duplicates\n      const filterArray = articles.filter((article, index, array) => {\n        //Only return one array index with same title\n        return array.findIndex(secondIndex => (secondIndex.title === article.title)) === index\n      });\n      let countryName;\n      if(country === \"ca\"){\n        countryName = \"Canada\"\n      } else if (country === \"us\") {\n        countryName = \"United States\"\n      } else if (country === \"gb\"){\n        countryName = \"England\"\n      }\n\n      this.setState({\n        news: filterArray,\n        isLoading: false,\n        title: countryName\n      })\n    })\n\n  }\n\n\n  //remove displayed Post\n  removeDisplayPost = (articleTitle) => {\n    //filter out removed post from news array.\n      const newNews = this.state.news.filter(article => (\n        article.title !== articleTitle\n      ));\n      //set new filtered array as news state\n      this.setState({\n        news: newNews\n      });  \n  }\n\n  //this handles the menu category/country dropdown.\n  menuClickHandler = (menuItem) => {\n    if(menuItem === \"country\") {\n      this.setState({\n        menus: {\n          category: false,\n          country: !this.state.menus.country\n        }\n      })\n    } else if(menuItem === \"category\") {\n      this.setState ({\n        menus: {\n          category: !this.state.menus.category,\n          country: false\n        }\n    })\n  } \n}\n\n//Open article in new tab\narticleLink = (link) => {\n  window.open(link, '_blank');\n}\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          categoryChange={this.categoryChange}\n          countryChange={this.countryChange}\n          menuClick={this.menuClickHandler}\n          menus ={this.state.menus}\n        />\n        {/* //this is a statement for if the news posts are loading or not */}\n        {this.state.isLoading ?\n            <div className=\"loading-container\">\n              <i class=\"fas fa-sync fa-spin\"></i>\n            </div>\n          :\n          <Main \n            news={this.state.news} \n            removePost ={this.removeDisplayPost}\n            articleClick={this.articleLink}\n            title={this.state.title}\n          />\n        }\n\n          <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}